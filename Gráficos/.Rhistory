help(aes)
iris
summary(iris)
# Load library
library(ggplot2)
# Start ggplot
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) # The aes() function is used to specify the X and Y axes
help(aes)
p <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length))
p <- p + geom_point()
p
p + xlim(c(4,6)) + ylim(c(1,2)) # Remove elements outside limits
p + coord_cartesian(xlim=c(4,6), ylim=c(1,2)) # Zooms in...
p + labs(title="Iris", subtitle="flowers", y="Petal length", x="Sepal Length", caption="Fig. 1") # Customizing 1
p <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) + geom_point(col="red", size=1)
p
p <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) + geom_point(aes(col=Species), size=2)
p
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) + geom_point(aes(col=Species, size=Sepal.Width))
p + scale_colour_brewer(palette = "Oranges")
library(RColorBrewer)
brewer.pal.info
p + scale_x_continuous(breaks=seq(4, 8, 0.5)) # Changing breaks
p + scale_x_continuous(breaks=seq(4, 8, 0.5), labels = letters[1:9]) # Changing labels
p + geom_text(aes(label=Species))
p + geom_text(aes(label=substr(Species, 1, 3)))
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) + geom_point(aes(col=Species, shape=Species))
# Orange dataset: Growth of Orange Trees
Orange
ggplot(Orange, aes(x=age, y=circumference)) + geom_point() + facet_grid( ~ Tree)
ggplot(Orange, aes(x=age, y=circumference)) + geom_point() + facet_wrap( ~ Tree, nrow=3)
ggplot(Orange, aes(x=age, y=circumference)) + geom_point() + facet_wrap( ~ Tree, nrow=3, scales = "free")
ggplot(iris, aes(x=Sepal.Length)) + geom_histogram()
ggplot(iris, aes(x=Sepal.Length)) + geom_histogram(bins = 10)
ggplot(iris, aes(x=Sepal.Length)) + geom_histogram(binwidth = 1)
niris <- melt(iris)
iris
summary(iris)
# Load library
library(ggplot2)
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
summary(iris)
# Load library
library(ggplot2)
# Start ggplot
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) # The aes() function is used to specify the X and Y axes
aes
iris
summary(iris)
# Load library
library(ggplot2)
# Start ggplot
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) # The aes() function is used to specify the X and Y axes
# Start ggplot
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) # The aes() function is used to specify the X and Y axes
p <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length))
# Start ggplot
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) # The aes() function is used to specify the X and Y axes
p <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length))
p <- p + geom_point()
p
?geom_point
p <- p + geom_point()
p
xlim
p + xlim(c(4,6)) + ylim(c(1,2)) # Remove elements outside limits
p + coord_cartesian(xlim=c(4,6), ylim=c(1,2)) # Zooms in...
p + labs(title="Iris", subtitle="flowers", y="Petal length", x="Sepal Length", caption="Fig. 1") # Customizing 1
p <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) + geom_point(col="red", size=1)
p
p <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length))
p <- p + geom_point()
p
p + xlim(c(4,6)) + ylim(c(1,2)) # Remove elements outside limits
p + coord_cartesian(xlim=c(4,6), ylim=c(1,2)) # Zooms in... esta no elimina los elementos solo hace zoom.
p <- p + geom_point()
p
p + coord_cartesian(xlim=c(4,6), ylim=c(1,2)) # Zooms in... esta no elimina los elementos solo hace zoom.
p <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) + geom_point(col="red", size=1)
p
p <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) + geom_point(aes(col=Species), size=2)
p
p <- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) + geom_point(aes(col=Species), size=2)
p
p <- p + geom_point()
p
p + xlim(c(4,6)) + ylim(c(1,2)) # Remove elements outside limits
p + coord_cartesian(xlim=c(4,6), ylim=c(1,2)) # Zooms in... esta no elimina los elementos solo hace zoom.
p + labs(title="Iris", subtitle="flowers", y="Petal length", x="Sepal Length", caption="Fig. 1") # Customizing 1
ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) + geom_point(aes(col=Species, size=Sepal.Width))
p + scale_colour_brewer(palette = "Oranges")
library(RColorBrewer)
brewer.pal.info
p + scale_x_continuous(breaks=seq(4, 8, 0.5)) # Changing breaks
p + scale_x_continuous(breaks=seq(4, 8, 0.5), labels = letters[1:9]) # Changing labels
p + geom_text(aes(label=Species))
p + geom_text(aes(label=substr(Species, 1, 3)))
(x=Sepal.Length, y=Petal.Length)
# Orange dataset: Growth of Orange Trees
Orange
ggplot(Orange, aes(x=age, y=circumference)) + geom_point() + facet_grid( ~ Tree)
ggplot(Orange, aes(x=age, y=circumference))
+ geom_point()
+ facet_grid( ~ Tree)
g <- ggplot(Orange, aes(x=age, y=circumference))
g + geom_point()
g + facet_grid( ~ Tree)
g
g
g <- ggplot(Orange, aes(x=age, y=circumference))
g + geom_point()
g + facet_grid( ~ Tree)
ggplot(Orange, aes(x=age, y=circumference)) + geom_point() + facet_grid( ~ Tree)
ggplot(Orange, aes(x=age, y=circumference)) + geom_point() + facet_wrap( ~ Tree, nrow=3)
ggplot(Orange, aes(x=age, y=circumference)) + geom_point() + facet_wrap( ~ Tree, nrow=3, scales = "free")
ggplot(iris, aes(x=Sepal.Length)) + geom_histogram()
grep("Female", ndeaths$Var2)
ndeaths <- melt(VADeaths)
library(reshape2)
ndeaths <- melt(VADeaths)
grep("Female", ndeaths$Var2)
ndeaths$Var2
p <- ggplot(nndeaths, aes(x=Var1, y=value, fill=zone)) + geom_bar(stat="identity") + facet_grid(~ gender + zone)
p
p + theme(legend.position="none") # No legend, or "left", "top", "bottom", "right" or specific location using c()
p + theme_bw()
p + theme_light()
p + theme(
panel.background = element_rect(fill = "pink",
colour = "lightblue",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.1, linetype = 'dashed',
colour = "blue"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "green"),
text = element_text(size=10, family="Courier"),
axis.text.x = element_text(angle=30)
)
seq(1, 2)
seq(1, 100, by = 2)
seq(1, length.out = 100)
seq(1, 50, length.out = 100)
seq(1, 50, )
?seq
seq(1, 100, by = 0.5)
rep(1:8)
rep(1:8, 2)
c(1:20, 20:!)
c(1:20, 20:1)
sequence(1, 100)
sequence(100)
sequence(100, )
?sequence
sequence(c(1:10))
sequence(c(10, -10))
sequence(c(10, 10))
sequence(c(10, 10))
sample(sequence(c(4, 10)), 4)
sample(sequence(c(4, 10)), 4)
sample(sequence(c(4, 10)), 4, TRUE)
sample(sequence(c(4, 10)), 4, TRUE)
sample(sequence(c(4, 10)), 4, TRUE)
sample(sequence(c(4, 10)), 4, TRUE)
sample(sequence(c(4, 10)), 4, FALSE)
sample(sequence(c(4, 10)), 4, FALSE)
sample(sequence(c(4, 10)), 4, FALSE)
sample(sequence(c(4, 10)), 4, )
sample(sequence(c(4, 10)), 4)
?Sample
?sample
sample(sequence(c(4, 10)), 4, replace = TRUE)
sample(sequence(c(4, 10)), 4, replace = TRUE)
sample(sequence(c(4, 10)), 4, replace = TRUE)
sample(sequence(c(4, 10)), 4, replace = TRUE)
sample(sequence(c(4, 10)), 4, replace = TRUE)
sample(sequence(c(4, 10)), 4, replace = FALSE)
sample(sequence(c(4, 10)), 4, replace = FALSE)
sample(sequence(c(4, 10)), 4, replace = FALSE)
sample(sequence(c(4, 10)), 4, replace = FALSE)
match(c("c"), letters * 2)
match(c("c"), letters)
match(c("c"), c("c", "c"))
match(c("c"), c("c", "c"))
match(c("c"), c("c", "c"))
while (condition) {
}
which(c("c", "c") == "c")
month
?month
?sate
?date
date
z <- c(5,2,-3,8)
subset(z, z > 2)
x <- c(6,1:3,NA,12)
subset(z, z > 2)
x <- c(6,1:3,NA,12)
x[ x > 2]
subset(z, z > 2)
x > 2
NA > 0
which(x , x * x > 8)
which(x, x * x > 8)
which(x, x * x > 8)
?which
which(x * x > 8)
x[which(x * x > 8)]
matrix(1, 5, 2)
ncol(a:10, 1:10)
ncol(1:10, 1:10)
?ncol
cbind(c(1:10), c(20:30))
?cbind
rbind
x <= matrix(1, 2, 2)
x <= matrix(1, 2, 2)
x
x <= matrix(1, 5, 2)
x <= matrix(1, 5, 2)
matrix(1, 5, 2)
x = matrix(1, 5, 2)
x
dim(x)
array(x, dim = dim(x))
array(1:50)
x
x.items()
x.items
x[:]
x[]
type(x)
x
is.matrix(x)
y = array(x, dim = dim(x))
is.matrix(y)
m1 <- matrix(1, nr = 2, nc = 2)
cbind(c(2, 2))
cbind(c(2, 2), c(2, 2))
cbind()
?cbind
rbind(1:4, c = 2)
rbind(1:4, c = 2)
rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2) # 4 rownames
rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2)
rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2)
rbind(1:4, c = 2, "a++" = 10, 10, deparse.level = 2)
diag(1, 2, 2)
diag(1, 2, 2)
m1 <- matrix(1, nr = 2, nc = 2)
m1
diag(m1)
m2 <- matrix(2, nr = 2, nc = 2)
rbind(m1, m2)
m1
rbind(m1, m2)
x
rbind(m1, m2)
x
x <- matrix(1:100, ncol=10):
x
x
x <- matrix(1:100, ncol=10):
x <- matrix(1:100, ncol=10)
x
x <- matrix(1:100, ncol=10)
x
x[ , 2] = x[ , 2]
order(x[ , 2] )
x[ , 2][order(x[ , 2])]
x[ , 2][order(x[ , 2], decreasing = TRUE)]
x[ , 2] = x[ , 2][order(x[ , 2], decreasing = TRUE)]
x
new_hope = c(460.998007, 314.4)
empire_strikes = c(290.475067, 247.9)
return_jedi = c(309.306177, 165.8)
new_hope = c(460.998007, 314.4)
empire_strikes = c(290.475067, 247.9)
return_jedi = c(309.306177, 165.8)
rbind(new_hope, empire_strikes, return_jedi)
pelis = rbind(new_hope, empire_strikes, return_jedi)
pelis
pelis = cbind(new_hope, empire_strikes, return_jedi)
row.names(pelis) = c("Box office Star Wars: In Millions (!)  First element: US", "Second element: Non-US")
pelis
pelis = cbind(new_hope, empire_strikes, return_jedi)
pelis
row.names(pelis) = c("Box office Star Wars: In Millions (!)  First element: US", "Second element: Non-US")
pelis
sum(pelis)
colSums(pelis)
worldwide_vector = colSums(pelis)
cbind(star_wars_matrix, worldwide_vector)
worldwide_vector = colSums(pelis)
cbind(star_wars_matrix, worldwide_vector)
cbind(pelis, worldwide_vector)
rbind(pelis, worldwide_vector)
all_wars_matrix = rbind(pelis, worldwide_vector)
all_wars_matrix
rowsum(worldwide_vector[1:2, ])
worldwide_vector[1:2, ]
worldwide_vector
all_wars_matrix[1:2, ]
rowSums(all_wars_matrix[1:2, ])
all_wars_matrix = cbind(pelis, rowSums(all_wars_matrix[1:2, ]))
all_wars_matrix
all_wars_matrix = cbind(pelis, "sum" = rowSums(all_wars_matrix[1:2, ]))
all_wars_matrix
all_wars_matrix = cbind(pelis, "total" = rowSums(all_wars_matrix[1:2, ]))
all_wars_matrix
all_wars_matrix
all_wars_matrix = cbind(all_wars_matrix, "total" = rowSums(all_wars_matrix[1:2, ]))
all_wars_matrix
rowSums(all_wars_matrix[1:2, ])
rowSums(all_wars_matrix[1:2, ])
row.names(pelis) = c("First element: US", "Second element: Non-US")
worldwide_vector = colSums(pelis)
all_wars_matrix = rbind(pelis, worldwide_vector)
all_wars_matrix = cbind(all_wars_matrix, "total" = rowSums(all_wars_matrix[1:2, ]))
all_wars_matrix = rbind(pelis, worldwide_vector)
all_wars_matrix
rowSums(all_wars_matrix[1:2, ])
rowSums(all_wars_matrix)
all_wars_matrix
all_wars_matrix
all_wars_matrix = rbind(pelis, worldwide_vector)
2all_wars_matrix = cbind(all_wars_matrix, "total" = rowSums(all_wars_matrix))
all_wars_matrix = cbind(all_wars_matrix, "total" = rowSums(all_wars_matrix))
all_wars_matrix
?apply
apply(all_wars_matrix, 2, median)
apply(all_wars_matrix, 2, median)
x = c(1, 2, 3, 3, 5, 3, 2, 4, NA),
x = c(1, 2, 3, 3, 5, 3, 2, 4, NA)
factor(x)
x <- c(11, 22, 47, 47, 11, 47, 11)
factor(x, levels=c(11, 22, 47), ordered=TRUE)
iris
?factor
factor(iris$Sepal.Length)
factor(iris$Sepal.Length)
?cut
cut(iris$Sepal.Length, breaks = 5)
cut(iris$Sepal.Length, breaks = 5)
table(iris$Sepal.Length)
table(iris$Species)
?table
table(cut(iris$Sepal.Length, breaks = 5))
with(airquality,
table(OzHi = Ozone > 80, Month, useNA = "ifany"))
with(iris, table(TRUE = Sepal.Length < 5, FALSE = Sepal.Length >= 5))
with(iris, table(TRUE = Sepal.Length < 5, FALSE = Sepal.Length >= 5))
with(iris, table(Sepal.Length < 5))
with(iris, table(Species, Sepal.Length < 5))
with(iris, table(Sepal.Length < 5), Species)
with(iris, table(Sepal.Length < 5, Species))
responses <- factor(c("Agree", "Agree", "Strongly Agree", "Disagree", "Agree"))
new_responses <- factor(c(levels(responses), ""Strongly Disagree"), ordered = TRUE)
new_responses <- factor(c(levels(responses), "Strongly Disagree"), ordered = TRUE)
new_responses
?factor
new_responses <- factor(c(levels(responses), "Strongly Disagree"), ordered = TRUE, levels = c("Strongly", "Agree","Agree" ,"Disagree" ,"Strongly Disagree"))
new_responses <- factor(c(levels(responses), "Strongly Disagree"), ordered = TRUE, levels = c("Strongly", "Agree","Disagree" ,"Strongly Disagree"))
new_responses
USArrests
dim(USArrests)
nrow(USArrests)
USArrests[ , 3]
USArrests[ , 3][order(USArrests[ , 3])]
USArrests
which(minorUSArrests)
?minor
sort(USArrests$Murder)
sort(USArrests$Murder)
whisort(USArrests$Murder)
?which
which(USArrests$Murder)
sort(USArrests$Murder)
?sort
row.names(sort(USArrests$Murder))
row.names(USArrests)
row.names(USArrests)
sort(USArrests$Murder)
summary(USArrests)
summary(USArrests$Murder)$3rd Qu
summary(USArrests$Murder)$3rdQu
summary(USArrests$Murder)[3]
summary(USArrests$Murder)[5]
summary(USArrests$Murder)[5][1]
summary(USArrests$Murder)[5, 1]
summary(USArrests$Murder)[5][[1]]
quantile
quantile(USArrests$Murder)
women
is.ordered(women$height)
bmi = women$weight / women$height * women$height
bmi
bmi = (women$weight / women$height * women$height) * 703
bmi
women
women = cbind(c(women, bmi))
women
women
women
bmi = (women$weight / women$height * women$height) * 703
bmi
women = cbind(women, "bmi" = bmi)
women
sort(women$bmi)
whichsort(women$bmi)
which(sort(women$bmi))
which(sort(bmi))
sort(women$bmi)
order(women$bmi)
women
sort(women$bmi)
order(women$bmi)
women[order(women$bmi), ]
women[order(women$bmi, decreasing = TRUE), ]
women[order(women$bmi, decreasing = TRUE), ]
whith(women, order(bmi))
with(women, order(bmi))
with(women, order(bmi, decreasing = TRUE))
with(women, order(bmi, height, decreasing = TRUE))
with(women, order(bmi, height, decreasing = TRUE))
co2
state.x77
subset(state.x77, Income < 3000)
subset(state.x77, state.x77$Income < 3000)
subset(state.x77$Income < 3000)
?subset
subset(state.x77, Income < 3000)
state.x77$Income
state.x77$income
state.x77
state.x77$Income
state.x77$"Income"
colnames(state.x77)
state.x77$Income
state.x77$Income
state.x77[1]
state.x77[ ,Income]
state.x77[ ,"Income"]
state.x77[ ,"Income"]
state.x77 = as.data.frame(state.x77)
state.x77$Income
subset(state.x77, Income < 3000)
subset(state.x77, Income < 4300)
# A period (.) represents any single character
grep(".e", c("Ciencia","de","Datos"))
month.name[1:4]
greap("April", month.name[1:4])
grep("April", month.name[1:4])
row.names(USArrests)[which(USArrests$UrbanPop > quantile(USArrests$UrbanPop)[[4]])]
USArrests$UrbanPop
quantile(USArrests$UrbanPop)
state.x77
cut(df2$Illiteracy, breaks = c(0, 1, 2, Inf), labels = c("low","some", "hight"))
cut(df2$Illiteracy, breaks = c(0, 1, 2, Inf), labels = c("low","some", "hight")
cut(df2$Illiteracy, breaks = c(0, 1, 2, Inf), labels = c("low","some", "hight"
cut(df2$Illiteracy, breaks = c(0, 1, 2, Inf), labels = c("low","some", "hight"))
cut(state.x77$Illiteracy, breaks = c(0, 1, 2, Inf), labels = c("low","some", "hight"))
cut(state.x77$Illiteracy, breaks = c(0, 1, 2, Inf))
?cut
cut(state.x77$Illiteracy, breaks = c(0, 1, 2, Inf), right = FALSE)
cut(state.x77$Illiteracy, breaks = c(0, 1, 2, Inf), right =
)
students
read.table("students.txt", header = TRUE)
read.table("student.txt", header = TRUE)
